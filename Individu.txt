initIndiv() -> Individu
Données:
Résultat: liste de bits générée aléatoirement
Lexique:

Algo :

	int longIndiv := 8
	List l := creer()
	Tant que (longIndiv != 0) Faire
		l = ajoutertq(l,rand()%2)
		longIndiv := longIndiv - 1	
	Fin Tant que

OU en passant longIndiv en paramètres aussi (pas de grand changement mais +propre imo)
	

Possibilité 1 : 
initIndiv_recursif() -> Individu
Données:
Résultat: liste de bits générée aléatoirement
Lexique:

Algo :

	Si <cas d'arrêt not found yet> Alors
		initIndiv_recursif() := creer()
	Sinon
		initIndiv_recursif() := ajoutertt(initIndiv_recursif(), rand()%2)
	Fsi

OU

Possibilité 2 :
initIndiv_recursif(longIndiv : entier) -> Individu
Données: longIndiv, la longueur souhaitée de la liste de bits
Résultat: liste de bits générée aléatoirement
Lexique:

Algo :

	Si longIndiv == 0 Alors 
		initIndiv_recursif(longIndiv) := creer()
	Sinon
		initIndiv_recursif(longIndiv) := ajoutertt(initIndiv_recursif(longIndiv-1), rand()%2)
	Fsi

	

decodeListe(l : Individu) -> entier
Données: la liste de bits à décoder
Résultat: l'entier correspondant à la liste de bits donnée
Lexique:

Algo :

	Si l est Vide, Alors
		decodeList(l) := 0
	Sinon   Si l->val = 0 Alors
			decodeList(l) := decodeList(l->next)
	        Sinon
			decodeList(l) := 2^compteur(l) + decodeList(l->next)
	        Fsi
	Fsi
				
				

croiserListes(pCroise : réel, l1 : Individu, l2 : Individu) -> Individu 
Données: pCroise probabilité d'intervertir des éléments des 2 listes, l1 et l2 deux liste de bits
Résultat: l3 la liste de bits caractérisant l'individu résultant des éléments intervertis de l1 et l2
Lexique:
	
Algo :

	Si l1 et l2 ne sont pas vides, Alors
		Si réel aléatoire entre 0 et 1 <= pCroise Alors
			croiserListes(pCroise, l1, l2) = ajoutt(croiserListes(pCroise, l1->next, l2->next), l1->val)
		Sinon
			croiserListes(pCroise, l1, l2) = ajoutt(croiserListes(pCroise, l1->next, l2->next), l2->val)
		Fsi
	Sinon
		croiserListes(pCroise, l1, l2) := creer()
	Fsi
		


qualiteIndiv(l : Individu) -> réel
Données: la liste de bits Individu à calculer sa qualité
Résultat: réel correspondant à la qualité de l'individu donné
Lexique:

Algo :

	qualiteIndiv(l) = - ((decodeList(l->listBits) / (2^(l->longIndiv))) * 2 + 1)^2	
	// Aucune idée si on doit faire en sorte que A et B puissent changer & si longIndiv paramètre d'Individu ?







