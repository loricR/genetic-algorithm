initPop(taillePop : entier) -> Population
Données: taillePop un entier représentant la taille voulue de la population (entre 20 et 200 selon l'énoncé)
Résultat: Population (une liste d'Individus) générée aléatoirement
Lexique:

Algo :

	Si taillePop == 0 Alors 
		initPop(taillePop) := creer()
	Sinon
		initPop(taillePop) := ajoutertt(initPop(taillePop-1), initIndiv_recursif(8))
	Fsi


triQualiteDec(l : Population) -> Population
Données: la Population à trier
Résultat: Population triée par qualité décroissante des Individus
Lexique:

Algo :


meilleursIndiv(l : Population, tSelect : entier) -> Population
Données: la Population de base
         entier correspondant à l'endroit où il faut tronquer la Population
Résultat: Population des meilleurs Individus en tronquant la liste et en la complétant par recopie des tSelect premiers éléments
Lexique:

Algo :				
    l = triQualiteDec(l)
    i = l
    TantQue tselect > 0 Faire
        i = suc(i)
        tselect = tselect - 1
    FTantQue
    TantQue non(vide(i)) Faire
        val(i) = val(l)
        i = suc(i)
        l = suc(l)
    FTantQue


Algo 2 :
	
	l = triQualiteDec(l)
	i = creer()
	TantQue tSelect > 0 Faire
		i = ajouterq(i, val(l))
		l = succ(l)
	FTantQue
	TantQue non(vide(l)) Faire
		TantQue non(vide(i)) et non(vide(l)) Faire
        		val(l) = val(i)
        		i = suc(i)
        		l = suc(l)
		FTantQue
		i = tete(i)
   	 FTantQue
		
		

croiserPop(p : Population, pCroise : réel) -> Population
Données: la Population qu'il faut croiser, pCroise la probabilité de croisement pour un Individu
Résultat: Population constituée d'Individus sélectionnés aléatoirement deux à deux dans la Population de base et croisés entre eux
Lexique: rand(0, longIndiv-1) donne un Individu aléatoire dans la taile de la Population, i != j

//On doit pouvoir croiser un nombre de fois défini par l'utilisateur
//Donc la taille de la population résultat ne doit pas être définie par la taille de la population de base

Algo :
    TantQue non(vide(p)) et longIndiv >= 2 Faire
    	Si longIndiv = 2 Alors
	    i = p
	    j = suc(p)
	Sinon
	    i = rand(0, longIndiv-1)
    	    j = rand(0, longIndiv-1)
	FSi
	res = insertq(res, croiserList(pCroise, i, j)
	p = suppIndiv(p, i)
	p = suppIndiv(p, j)
    FTantQue

Lexique : randIndiv(p) choisit un individu aléatoire dans la population p, compteur(p) mesure la taille de la population p

Algo 2 :
	i = NULL
	j = NULL
	p2 = NULL
	TantQue compteur(p2) != compteur(p) Faire
		Faire 
			i = randIndiv(p)
			j = randIndiv(p)		
		TantQue i == j 			
		FinFaireTantQue

		p2 = insertq(p2, croiserList(pCroise, i, j)
	FTantQue










