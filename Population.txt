initPop(taillePop : entier) -> Population
Données: taillePop un entier représentant la taille voulue de la population (entre 20 et 200 selon l'énoncé)
Résultat: Population (une liste d'Individus) générée aléatoirement
Lexique:

Algo :

	Si taillePop == 0 Alors 
		initPop(taillePop) := creer()
	Sinon
		initPop(taillePop) := ajoutertt(initPop(taillePop-1), initIndiv_recursif(8))
	Fsi



partition(p1 : Population, p2 : Population) -> Population
Données: p1 et p2 deux individus d'une population
Résultat: Population avec certains individus échangés
Lexique: qualiteIndiv(Individu i) la fonction qui renvoie la qualité associée à un individu
         val(Population p) renvoie l'individu vers lequel pointe p
	 suc(Population p) renvoie le prochain individu d'une population

Algo :
	pivot = p1
	actuel = p1
	Tant que actuel != creer() et actuel != p2 Faire
		Si(qualiteIndiv(val(actuel))) > qualiteIndiv(val(p2))) Alors
			pivot = p1
			temp = val(p1)
			val(p1) = val(actuel)
			val(actuel) = temp
		FSi
		actuel = suc(actuel)
	FTantQue
	temp = val(p1)
	val(p1) = val(p2)
	val(p2) = temp
	
	partition(p1,p2) = pivot


triQualiteDec(p1 : Population, p2 : Population) -> void
Données: p1 la population à trier et p2 le dernier individu de la population à trier
Résultat: Population triée par qualité décroissante des Individus
Lexique: partition(Population p1, Population p2) la fonction qui échange des individus dans une population sous certaines conditions

Algo :
	Si p1 != p2 Alors
		pivot = partition(p1,p2)
		Si pivot != creer() et suc(pivot) != creer() Alors
			triQualiteDec(p1,p2) = triQualiteDec(suc(pivot), p2)
		Sinon Si pivot != creer() et p1 != pivot Alors
			triQualiteDec(p1,p2) = triQualiteDec(p1, pivot)
		FSi
	Fsi
		


meilleursIndiv(l : Population, tSelect : entier) -> Population
Données: la Population de base
         entier correspondant à l'endroit où il faut tronquer la Population
Résultat: Population des meilleurs Individus en tronquant la liste et en la complétant par recopie des tSelect premiers éléments
Lexique:

Algo :
	
	l = triQualiteDec(l)
	i = creer()
	TantQue tSelect > 0 Faire
		i = ajouterq(i, val(l))
		l = succ(l)
		tSelect = tSelect-1
	FTantQue
	TantQue non(vide(l)) Faire
		TantQue non(vide(i)) et non(vide(l)) Faire
        		val(l) = val(i)
        		i = suc(i)
        		l = suc(l)
		FTantQue
		i = tete(i)
   	 FTantQue
		
		

croiserPop(p : Population, pCroise : réel) -> Population
Données: la Population qu'il faut croiser, pCroise la probabilité de croisement pour un Individu
Résultat: Population constituée d'Individus sélectionnés aléatoirement deux à deux dans la Population de base et croisés entre eux
Lexique : randIndiv(p) choisit un individu aléatoire dans la population p, compteur(p) mesure la taille de la population p

Algo :
	i = NULL
	j = NULL
	p2 = NULL
	TantQue compteur(p2) != compteur(p) Faire
		Faire 
			i = randIndiv(p)
			j = randIndiv(p)		
		TantQue i == j 			
		FinFaireTantQue

		p2 = insertq(p2, croiserList(pCroise, i, j)
	FTantQue










